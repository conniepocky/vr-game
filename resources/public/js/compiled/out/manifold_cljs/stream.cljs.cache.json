["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$reduce","~$map","~$mapcat","~$repeatedly","~$concat","~$reductions","~$filter"]],"~:name","~$manifold-cljs.stream","~:imports",null,"~:requires",["^ ","~$manifold-cljs.stream.graph","^B","~$manifold-cljs.executor","^C","~$log","~$manifold-cljs.impl.logging","~$clj","~$cljs.core","~$sq","~$manifold-cljs.stream.seq","~$u","~$manifold-cljs.utils","^G","^G","~$manifold-cljs.time","^K","^I","^I","~$default","~$manifold-cljs.stream.default-impl","~$clojure.core","^G","^E","^E","~$time","^K","~$manifold-cljs.deferred","^P","~$e","^C","~$manifold-cljs.stream.core","^Q","~$g","^B","^M","^M","^J","^J","~$core","^Q","~$d","^P"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$->SinkProxy",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:protocols",["^6",["~$manifold-cljs.stream.core/IEventSink","~$manifold-cljs.stream.core/IEventStream"]],"~:file","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","~:end-column",19,"~:column",10,"~:factory","~:positional","~:line",70,"~:end-line",70,"~:arglists",["~#list",["~$quote",["^18",[["~$sink"]]]]],"~:skip-protocol-flag",null,"~:doc","Positional factory function for manifold-cljs.stream/SinkProxy."],"^Y",["^6",["^Z","^["]],"^>","~$manifold-cljs.stream/->SinkProxy","~:variadic",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",19,"~:method-params",["^18",[["^1:"]]],"~:protocol-impl",null,"~:arglists-meta",["^18",[null,null]],"^12",1,"^13","^14","^15",70,"^16",70,"~:max-fixed-arity",1,"~:fn-var",true,"^17",["^18",["^19",["^18",[["^1:"]]]]],"^1;",null,"^1<","Positional factory function for manifold-cljs.stream/SinkProxy."],"^7",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",677,"^12",7,"^16",677,"^11",13,"^17",["^18",["^19",["^18",[["~$f","~$s"],["~$f","~$initial-value","~$s"]]]]],"^1<","Equivalent to Clojure's `reduce`, but returns a deferred representing the return value.\n\n   The deferred will be realized once the stream is closed or if the accumulator\n   functions returns a `reduced` value.","~:top-fn",["^ ","^1>",false,"^1B",3,"^1?",["^18",[["~$f","~$s"],["~$f","^1D","~$s"]]],"^17",["^18",[["~$f","~$s"],["~$f","^1D","~$s"]]],"^1A",["^18",[null,null]]]],"^>","~$manifold-cljs.stream/reduce","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",13,"^1E",["^ ","^1>",false,"^1B",3,"^1?",["^18",[["~$f","~$s"],["~$f","^1D","~$s"]]],"^17",["^18",[["~$f","~$s"],["~$f","^1D","~$s"]]],"^1A",["^18",[null,null]]],"^1?",["^18",[["~$f","~$s"],["~$f","^1D","~$s"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",677,"^16",677,"^1B",3,"^1C",true,"^17",["^18",[["~$f","~$s"],["~$f","^1D","~$s"]]],"^1<","Equivalent to Clojure's `reduce`, but returns a deferred representing the return value.\n\n   The deferred will be realized once the stream is closed or if the accumulator\n   functions returns a `reduced` value."],"~$sinkable?",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",17,"^12",7,"^16",17,"^11",16,"^17",["^18",["^19",["^18",[["~$x"]]]]]],"^>","~$manifold-cljs.stream/sinkable?","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",16,"^1?",["^18",[["~$x"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",17,"^16",17,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["~$x"]]]]]],"~$on-closed",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",192,"^12",7,"^16",192,"^11",16,"^17",["^18",["^19",["^18",[["^1:","~$callback"]]]]],"^1<","Registers a no-arg callback which is invoked when the sink is closed."],"^>","~$manifold-cljs.stream/on-closed","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",16,"^1?",["^18",[["^1:","^1J"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",192,"^16",192,"^1B",2,"^1C",true,"^17",["^18",["^19",["^18",[["^1:","^1J"]]]]],"^1<","Registers a no-arg callback which is invoked when the sink is closed."],"~$stream?",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",135,"^12",7,"^16",135,"^11",14,"^17",["^18",["^19",["^18",[["~$x"]]]]],"^1<","Returns true if the object is a Manifold stream."],"^>","~$manifold-cljs.stream/stream?","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",14,"^1?",["^18",[["~$x"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",135,"^16",135,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["~$x"]]]]],"^1<","Returns true if the object is a Manifold stream."],"~$SourceProxy",["^ ","~:num-fields",1,"^Y",["^6",["~$manifold-cljs.stream.core/IEventSource","^["]],"^>","~$manifold-cljs.stream/SourceProxy","^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",21,"~:type",true,"^12",10,"^15",96,"~:record",false,"^16",96,"^1;",null],"^8",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",569,"^12",7,"^16",569,"^11",10,"^17",["^18",["^19",["^18",[["~$f","~$s"],["~$f","~$s","~$&","~$rest"]]]]],"^1<","Equivalent to Clojure's `map`, but for streams instead of sequences.","^1E",["^ ","^1>",true,"^1B",2,"^1?",["^18",[["~$f","~$s"]]],"^17",["^18",[["~$f","~$s"],["~$f","~$s","~$&","^1T"]]],"^1A",["^18",[null,null]]]],"^>","~$manifold-cljs.stream/map","^1>",true,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",10,"^1E",["^ ","^1>",true,"^1B",2,"^1?",["^18",[["~$f","~$s"]]],"^17",["^18",[["~$f","~$s"],["~$f","~$s","~$&","^1T"]]],"^1A",["^18",[null,null]]],"^1?",["^18",[["~$f","~$s"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",569,"^16",569,"^1B",2,"^1C",true,"^17",["^18",[["~$f","~$s"],["~$f","~$s","~$&","^1T"]]],"^1<","Equivalent to Clojure's `map`, but for streams instead of sequences."],"^9",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",703,"^12",7,"^16",703,"^11",13,"^17",["^18",["^19",["^18",[["~$f","~$s"],["~$f","~$s","~$&","^1T"]]]]],"^1<","Equivalent to Clojure's `mapcat`, but for streams instead of sequences.","^1E",["^ ","^1>",true,"^1B",2,"^1?",["^18",[["~$f","~$s"]]],"^17",["^18",[["~$f","~$s"],["~$f","~$s","~$&","^1T"]]],"^1A",["^18",[null,null]]]],"^>","~$manifold-cljs.stream/mapcat","^1>",true,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",13,"^1E",["^ ","^1>",true,"^1B",2,"^1?",["^18",[["~$f","~$s"]]],"^17",["^18",[["~$f","~$s"],["~$f","~$s","~$&","^1T"]]],"^1A",["^18",[null,null]]],"^1?",["^18",[["~$f","~$s"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",703,"^16",703,"^1B",2,"^1C",true,"^17",["^18",[["~$f","~$s"],["~$f","~$s","~$&","^1T"]]],"^1<","Equivalent to Clojure's `mapcat`, but for streams instead of sequences."],"~$drain-into",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",499,"^12",7,"^16",499,"^11",17,"^17",["^18",["^19",["^18",[["~$src","~$dst"]]]]],"^1<","Takes all messages from `src` and puts them into `dst`, and returns a deferred that\n   yields `true` once `src` is drained or `dst` is closed.  If `src` is closed or drained,\n   `dst` will not be closed."],"^>","~$manifold-cljs.stream/drain-into","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",17,"^1?",["^18",[["^1X","^1Y"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",499,"^16",499,"^1B",2,"^1C",true,"^17",["^18",["^19",["^18",[["^1X","^1Y"]]]]],"^1<","Takes all messages from `src` and puts them into `dst`, and returns a deferred that\n   yields `true` once `src` is drained or `dst` is closed.  If `src` is closed or drained,\n   `dst` will not be closed."],"~$buffer",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",940,"^12",7,"^16",940,"^11",13,"^17",["^18",["^19",["^18",[["~$limit","~$s"],["~$metric","^20","~$s"]]]]],"^1<","Takes a stream, and returns a stream which is a buffered view of that stream.  The buffer\n   size may either be measured in messages, or if a `metric` is defined, by the sum of `metric`\n   mapped over all messages currently buffered.","^1E",["^ ","^1>",false,"^1B",3,"^1?",["^18",[["^20","~$s"],["^21","^20","~$s"]]],"^17",["^18",[["^20","~$s"],["^21","^20","~$s"]]],"^1A",["^18",[null,null]]]],"^>","~$manifold-cljs.stream/buffer","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",13,"^1E",["^ ","^1>",false,"^1B",3,"^1?",["^18",[["^20","~$s"],["^21","^20","~$s"]]],"^17",["^18",[["^20","~$s"],["^21","^20","~$s"]]],"^1A",["^18",[null,null]]],"^1?",["^18",[["^20","~$s"],["^21","^20","~$s"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",940,"^16",940,"^1B",3,"^1C",true,"^17",["^18",[["^20","~$s"],["^21","^20","~$s"]]],"^1<","Takes a stream, and returns a stream which is a buffered view of that stream.  The buffer\n   size may either be measured in messages, or if a `metric` is defined, by the sum of `metric`\n   mapped over all messages currently buffered."],"~$close!",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",180,"^12",7,"^16",180,"^11",13,"^17",["^18",["^19",["^18",[["^1:"]]]]],"^1<","Closes a source or sink, so that it can't emit or accept any more messages."],"^>","~$manifold-cljs.stream/close!","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",13,"^1?",["^18",[["^1:"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",180,"^16",180,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["^1:"]]]]],"^1<","Closes a source or sink, so that it can't emit or accept any more messages."],"~$lazily-partition-by",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",723,"^12",7,"^16",723,"^11",26,"^17",["^18",["^19",["^18",[["~$f","~$s"]]]]],"^1<","Equivalent to Clojure's `partition-by`, but returns a stream of streams.  This means that\n   if a sub-stream is not completely consumed, the next sub-stream will never be emitted.\n\n   Use with caution.  If you're not totally sure you want a stream of streams, use\n   `(transform (partition-by f))` instead."],"^>","~$manifold-cljs.stream/lazily-partition-by","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",26,"^1?",["^18",[["~$f","~$s"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",723,"^16",723,"^1B",2,"^1C",true,"^17",["^18",["^19",["^18",[["~$f","~$s"]]]]],"^1<","Equivalent to Clojure's `partition-by`, but returns a stream of streams.  This means that\n   if a sub-stream is not completely consumed, the next sub-stream will never be emitted.\n\n   Use with caution.  If you're not totally sure you want a stream of streams, use\n   `(transform (partition-by f))` instead."],"~$sourceable?",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",24,"^12",7,"^16",24,"^11",18,"^17",["^18",["^19",["^18",[["~$x"]]]]]],"^>","~$manifold-cljs.stream/sourceable?","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",18,"^1?",["^18",[["~$x"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",24,"^16",24,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["~$x"]]]]]],"~$source?",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",141,"^12",7,"^16",141,"^11",14,"^17",["^18",["^19",["^18",[["~$x"]]]]],"^1<","Returns true if the object is a Manifold source."],"^>","~$manifold-cljs.stream/source?","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",14,"^1?",["^18",[["~$x"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",141,"^16",141,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["~$x"]]]]],"^1<","Returns true if the object is a Manifold source."],"~$put-all!",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",216,"^12",7,"^16",216,"^11",15,"^17",["^18",["^19",["^18",[["^1:","~$msgs"]]]]],"^1<","Puts all values into the sink, returning a deferred that yields `true` if all puts\n   are successful, or `false` otherwise.  If the sink provides backpressure, will\n   pause. Guaranteed to be non-blocking."],"^>","~$manifold-cljs.stream/put-all!","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",15,"^1?",["^18",[["^1:","^2<"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",216,"^16",216,"^1B",2,"^1C",true,"^17",["^18",["^19",["^18",[["^1:","^2<"]]]]],"^1<","Puts all values into the sink, returning a deferred that yields `true` if all puts\n   are successful, or `false` otherwise.  If the sink provides backpressure, will\n   pause. Guaranteed to be non-blocking."],"~$description",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",153,"^12",7,"^16",153,"^11",18,"^17",["^18",["^19",["^18",[["~$x"]]]]],"^1<","Returns a description of the stream."],"^>","~$manifold-cljs.stream/description","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",18,"^1?",["^18",[["~$x"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",153,"^16",153,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["~$x"]]]]],"^1<","Returns a description of the stream."],"~$->Callback",["^ ","^W",null,"^X",["^ ","^Y",["^6",["^Z","^["]],"^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",18,"^12",10,"^13","^14","^15",388,"^16",388,"^17",["^18",["^19",["^18",[["~$f","~$close-callback","~$downstream","~$constant-response"]]]]],"^1;",null,"^1<","Positional factory function for manifold-cljs.stream/Callback."],"^Y",["^6",["^Z","^["]],"^>","~$manifold-cljs.stream/->Callback","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",18,"^1?",["^18",[["~$f","^2A","^2B","^2C"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^13","^14","^15",388,"^16",388,"^1B",4,"^1C",true,"^17",["^18",["^19",["^18",[["~$f","^2A","^2B","^2C"]]]]],"^1;",null,"^1<","Positional factory function for manifold-cljs.stream/Callback."],"^2B",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",159,"^12",7,"^16",159,"^11",17,"^17",["^18",["^19",["^18",[["~$x"]]]]],"^1<","Returns all sinks downstream of the given source as a sequence of 2-tuples, with the\n   first element containing the connection's description, and the second element containing\n   the sink."],"^>","~$manifold-cljs.stream/downstream","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",17,"^1?",["^18",[["~$x"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",159,"^16",159,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["~$x"]]]]],"^1<","Returns all sinks downstream of the given source as a sequence of 2-tuples, with the\n   first element containing the connection's description, and the second element containing\n   the sink."],"~$->source",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",51,"^12",7,"^16",51,"^11",15,"^17",["^18",["^19",["^18",[["~$x"],["~$x","~$default-val"]]]]],"^1<","Converts, if possible, the object to a Manifold source, or `default-val` if it cannot.  If no\n   default value is given, an exception is thrown.","^1E",["^ ","^1>",false,"^1B",2,"^1?",["^18",[["~$x"],["~$x","^2G"]]],"^17",["^18",[["~$x"],["~$x","^2G"]]],"^1A",["^18",[null,null]]]],"^>","~$manifold-cljs.stream/->source","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",15,"^1E",["^ ","^1>",false,"^1B",2,"^1?",["^18",[["~$x"],["~$x","^2G"]]],"^17",["^18",[["~$x"],["~$x","^2G"]]],"^1A",["^18",[null,null]]],"^1?",["^18",[["~$x"],["~$x","^2G"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",51,"^16",51,"^1B",2,"^1C",true,"^17",["^18",[["~$x"],["~$x","^2G"]]],"^1<","Converts, if possible, the object to a Manifold source, or `default-val` if it cannot.  If no\n   default value is given, an exception is thrown."],"~$weak-handle",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",167,"^12",7,"^16",167,"^11",18,"^17",["^18",["^19",["^18",[["~$x"]]]]],"^1<","Returns a weak reference that can be used to construct topologies of streams."],"^>","~$manifold-cljs.stream/weak-handle","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",18,"^1?",["^18",[["~$x"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",167,"^16",167,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["~$x"]]]]],"^1<","Returns a weak reference that can be used to construct topologies of streams."],"~$->BufferedStream",["^ ","^W",null,"^X",["^ ","^Y",["^6",["^1P","^Z","^["]],"^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",24,"^12",10,"^13","^14","^15",809,"^16",809,"^17",["^18",["^19",["^18",[["~$buf","^20","^21","~$description-fn","~$buffer-size","~$last-put","~$buf+"]]]]],"^1;",null,"^1<","Positional factory function for manifold-cljs.stream/BufferedStream."],"^Y",["^6",["^1P","^Z","^["]],"^>","~$manifold-cljs.stream/->BufferedStream","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",24,"^1?",["^18",[["^2L","^20","^21","^2M","^2N","^2O","^2P"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^13","^14","^15",809,"^16",809,"^1B",7,"^1C",true,"^17",["^18",["^19",["^18",[["^2L","^20","^21","^2M","^2N","^2O","^2P"]]]]],"^1;",null,"^1<","Positional factory function for manifold-cljs.stream/BufferedStream."],"~$drained?",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",198,"^12",7,"^16",198,"^11",15,"^17",["^18",["^19",["^18",[["~$source"]]]]],"^1<","Returns true if the event source is drained."],"^>","~$manifold-cljs.stream/drained?","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",15,"^1?",["^18",[["^2S"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",198,"^16",198,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["^2S"]]]]],"^1<","Returns true if the event source is drained."],"~$transform",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",558,"^12",7,"^16",558,"^11",16,"^17",["^18",["^19",["^18",[["~$xform","~$s"],["^2V","^2N","~$s"]]]]],"^1<","Takes a transducer `xform` and returns a source which applies it to source `s`. A buffer-size\n   may optionally be defined for the output source.","^1E",["^ ","^1>",false,"^1B",3,"^1?",["^18",[["^2V","~$s"],["^2V","^2N","~$s"]]],"^17",["^18",[["^2V","~$s"],["^2V","^2N","~$s"]]],"^1A",["^18",[null,null]]]],"^>","~$manifold-cljs.stream/transform","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",16,"^1E",["^ ","^1>",false,"^1B",3,"^1?",["^18",[["^2V","~$s"],["^2V","^2N","~$s"]]],"^17",["^18",[["^2V","~$s"],["^2V","^2N","~$s"]]],"^1A",["^18",[null,null]]],"^1?",["^18",[["^2V","~$s"],["^2V","^2N","~$s"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",558,"^16",558,"^1B",3,"^1C",true,"^17",["^18",[["^2V","~$s"],["^2V","^2N","~$s"]]],"^1<","Takes a transducer `xform` and returns a source which applies it to source `s`. A buffer-size\n   may optionally be defined for the output source."],"~$Callback",["^ ","^1O",4,"^Y",["^6",["^Z","^["]],"^>","~$manifold-cljs.stream/Callback","^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",18,"^1R",true,"^12",10,"^15",388,"^1S",false,"^16",388,"^1;",null],"~$splice",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",378,"^12",7,"^16",378,"^11",13,"^17",["^18",["^19",["^18",[["^1:","^2S"]]]]],"^1<","Splices together two halves of a stream, such that all messages enqueued via `put!` go\n   into `sink`, and all messages dequeued via `take!` come from `source`."],"^>","~$manifold-cljs.stream/splice","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",13,"^1?",["^18",[["^1:","^2S"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",378,"^16",378,"^1B",2,"^1C",true,"^17",["^18",["^19",["^18",[["^1:","^2S"]]]]],"^1<","Splices together two halves of a stream, such that all messages enqueued via `put!` go\n   into `sink`, and all messages dequeued via `take!` come from `source`."],"~$connect-via-proxy",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",482,"^12",8,"^16",482,"^11",25,"~:private",true,"^17",["^18",["^19",["^18",[["^1X","~$proxy","^1Y"],["^1X","^32","^1Y","~$options"]]]]],"^1E",["^ ","^1>",false,"^1B",4,"^1?",["^18",[["^1X","^32","^1Y"],["^1X","^32","^1Y","^33"]]],"^17",["^18",[["^1X","^32","^1Y"],["^1X","^32","^1Y","^33"]]],"^1A",["^18",[null,null]]]],"^31",true,"^>","~$manifold-cljs.stream/connect-via-proxy","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",25,"^1E",["^ ","^1>",false,"^1B",4,"^1?",["^18",[["^1X","^32","^1Y"],["^1X","^32","^1Y","^33"]]],"^17",["^18",[["^1X","^32","^1Y"],["^1X","^32","^1Y","^33"]]],"^1A",["^18",[null,null]]],"^1?",["^18",[["^1X","^32","^1Y"],["^1X","^32","^1Y","^33"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",482,"^16",482,"^1B",4,"^1C",true,"^17",["^18",[["^1X","^32","^1Y"],["^1X","^32","^1Y","^33"]]]],"~$synchronous?",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",173,"^12",7,"^16",173,"^11",19,"^17",["^18",["^19",["^18",[["~$x"]]]]],"^1<","Returns true if the underlying abstraction behaves synchronously, using thread blocking\n   to provide backpressure."],"^>","~$manifold-cljs.stream/synchronous?","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",19,"^1?",["^18",[["~$x"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",173,"^16",173,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["~$x"]]]]],"^1<","Returns true if the underlying abstraction behaves synchronously, using thread blocking\n   to provide backpressure."],"^;",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",763,"^12",7,"^16",763,"^11",13,"^17",["^18",["^19",["^18",[["~$s"]]]]],"^1<","Takes a stream of streams, and flattens it into a single stream."],"^>","~$manifold-cljs.stream/concat","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",13,"^1?",["^18",[["~$s"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",763,"^16",763,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["~$s"]]]]],"^1<","Takes a stream of streams, and flattens it into a single stream."],"^<",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",645,"^12",7,"^16",645,"^11",17,"^17",["^18",["^19",["^18",[["~$f","~$s"],["~$f","^1D","~$s"]]]]],"^1<","Equivalent to Clojure's `reductions`, but for streams instead of sequences.","^1E",["^ ","^1>",false,"^1B",3,"^1?",["^18",[["~$f","~$s"],["~$f","^1D","~$s"]]],"^17",["^18",[["~$f","~$s"],["~$f","^1D","~$s"]]],"^1A",["^18",[null,null]]]],"^>","~$manifold-cljs.stream/reductions","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",17,"^1E",["^ ","^1>",false,"^1B",3,"^1?",["^18",[["~$f","~$s"],["~$f","^1D","~$s"]]],"^17",["^18",[["~$f","~$s"],["~$f","^1D","~$s"]]],"^1A",["^18",[null,null]]],"^1?",["^18",[["~$f","~$s"],["~$f","^1D","~$s"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",645,"^16",645,"^1B",3,"^1C",true,"^17",["^18",[["~$f","~$s"],["~$f","^1D","~$s"]]],"^1<","Equivalent to Clojure's `reductions`, but for streams instead of sequences."],"~$connect-via",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",460,"^12",7,"^16",460,"^11",18,"^17",["^18",["^19",["^18",[["^1X","^1J","^1Y"],["^1X","^1J","^1Y","^33"]]]]],"^1<","Feeds all messages from `src` into `callback`, with the understanding that they will\n   eventually be propagated into `dst` in some form.  The return value of `callback`\n   should be a deferred yielding either `true` or `false`. When `false`,  the downstream\n   sink is assumed to be closed, and the connection is severed.\n\n   Returns a deferred which yields `true` when `src` is exhausted or `callback` yields `false`.","^1E",["^ ","^1>",false,"^1B",4,"^1?",["^18",[["^1X","^1J","^1Y"],["^1X","^1J","^1Y","^33"]]],"^17",["^18",[["^1X","^1J","^1Y"],["^1X","^1J","^1Y","^33"]]],"^1A",["^18",[null,null]]]],"^>","~$manifold-cljs.stream/connect-via","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",18,"^1E",["^ ","^1>",false,"^1B",4,"^1?",["^18",[["^1X","^1J","^1Y"],["^1X","^1J","^1Y","^33"]]],"^17",["^18",[["^1X","^1J","^1Y"],["^1X","^1J","^1Y","^33"]]],"^1A",["^18",[null,null]]],"^1?",["^18",[["^1X","^1J","^1Y"],["^1X","^1J","^1Y","^33"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",460,"^16",460,"^1B",4,"^1C",true,"^17",["^18",[["^1X","^1J","^1Y"],["^1X","^1J","^1Y","^33"]]],"^1<","Feeds all messages from `src` into `callback`, with the understanding that they will\n   eventually be propagated into `dst` in some form.  The return value of `callback`\n   should be a deferred yielding either `true` or `false`. When `false`,  the downstream\n   sink is assumed to be closed, and the connection is severed.\n\n   Returns a deferred which yields `true` when `src` is exhausted or `callback` yields `false`."],"~$connect",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",268,"^12",7,"^16",268,"^11",14,"^17",["^18",["^19",[["^2S","^1:"],["^2S","^1:",["^ ","~:keys",["~$upstream?","~$downstream?","~$timeout","^2>"],"~:or",["^ ","^3=",false,"^3>",true]]]]]],"^1<","Connects a source to a sink, propagating all messages from the former into the latter.\n\n   Optionally takes a map of parameters:\n\n   |:---|:---\n   | `upstream?` | if closing the sink should always close the source, even if there are other sinks downstream of the source.  Defaults to `false`.  Note that if the sink is the only thing downstream of the source, the source will always be closed, unless it is permanent.\n   | `downstream?` | if closing the source will close the sink.  Defaults to `true`.\n   | `timeout` | if defined, the maximum time, in milliseconds, that will be spent trying to put a message into the sink before closing it.  Useful when there are multiple sinks downstream of a source, and you want to avoid a single backed up sink from blocking all the others.\n   | `description` | describes the connection, useful for traversing the stream topology via `downstream`.","^1E",["^ ","^1>",false,"^1B",3,"^1?",["^18",[["^2S","^1:"],["^2S","^1:","^33"]]],"^17",["^18",[["^2S","^1:"],["^2S","^1:","^33"]]],"^1A",["^18",[null,null]]]],"^>","~$manifold-cljs.stream/connect","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",14,"^1E",["^ ","^1>",false,"^1B",3,"^1?",["^18",[["^2S","^1:"],["^2S","^1:","^33"]]],"^17",["^18",[["^2S","^1:"],["^2S","^1:","^33"]]],"^1A",["^18",[null,null]]],"^1?",["^18",[["^2S","^1:"],["^2S","^1:","^33"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",268,"^16",268,"^1B",3,"^1C",true,"^17",["^18",[["^2S","^1:"],["^2S","^1:","^33"]]],"^1<","Connects a source to a sink, propagating all messages from the former into the latter.\n\n   Optionally takes a map of parameters:\n\n   |:---|:---\n   | `upstream?` | if closing the sink should always close the source, even if there are other sinks downstream of the source.  Defaults to `false`.  Note that if the sink is the only thing downstream of the source, the source will always be closed, unless it is permanent.\n   | `downstream?` | if closing the source will close the sink.  Defaults to `true`.\n   | `timeout` | if defined, the maximum time, in milliseconds, that will be spent trying to put a message into the sink before closing it.  Useful when there are multiple sinks downstream of a source, and you want to avoid a single backed up sink from blocking all the others.\n   | `description` | describes the connection, useful for traversing the stream topology via `downstream`."],"~$->sink",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",32,"^12",7,"^16",32,"^11",13,"^17",["^18",["^19",["^18",[["~$x"],["~$x","^2G"]]]]],"^1<","Converts, if possible, the object to a Manifold sink, or `default-val` if it cannot.  If no\n   default value is given, an exception is thrown.","^1E",["^ ","^1>",false,"^1B",2,"^1?",["^18",[["~$x"],["~$x","^2G"]]],"^17",["^18",[["~$x"],["~$x","^2G"]]],"^1A",["^18",[null,null]]]],"^>","~$manifold-cljs.stream/->sink","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",13,"^1E",["^ ","^1>",false,"^1B",2,"^1?",["^18",[["~$x"],["~$x","^2G"]]],"^17",["^18",[["~$x"],["~$x","^2G"]]],"^1A",["^18",[null,null]]],"^1?",["^18",[["~$x"],["~$x","^2G"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",32,"^16",32,"^1B",2,"^1C",true,"^17",["^18",[["~$x"],["~$x","^2G"]]],"^1<","Converts, if possible, the object to a Manifold sink, or `default-val` if it cannot.  If no\n   default value is given, an exception is thrown."],"~$consume",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",431,"^12",9,"^16",431,"^11",16,"^17",["^18",["^19",["^18",[["^1J","^2S"]]]]],"^1<","Feeds all messages from `source` into `callback`.\n\n     Messages will be processed as quickly as the callback can be executed. Returns\n     a deferred which yields `true` when `source` is exhausted."],"^>","~$manifold-cljs.stream/consume","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",16,"^1?",["^18",[["^1J","^2S"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",3,"^15",431,"^16",431,"^1B",2,"^1C",true,"^17",["^18",["^19",["^18",[["^1J","^2S"]]]]],"^1<","Feeds all messages from `source` into `callback`.\n\n     Messages will be processed as quickly as the callback can be executed. Returns\n     a deferred which yields `true` when `source` is exhausted."],"~$sink?",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",147,"^12",7,"^16",147,"^11",12,"^17",["^18",["^19",["^18",[["~$x"]]]]],"^1<","Returns true if the object is a Manifold sink."],"^>","~$manifold-cljs.stream/sink?","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",12,"^1?",["^18",[["~$x"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",147,"^16",147,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["~$x"]]]]],"^1<","Returns true if the object is a Manifold sink."],"~$source-only",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",122,"^12",7,"^16",122,"^11",18,"^17",["^18",["^19",["^18",[["~$s"]]]]],"^1<","Returns a view of the stream which is only a source."],"^>","~$manifold-cljs.stream/source-only","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",18,"^1?",["^18",[["~$s"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",122,"^16",122,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["~$s"]]]]],"^1<","Returns a view of the stream which is only a source."],"~$stream",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",302,"^12",7,"^16",302,"^11",13,"^17",["^18",["^19",["^18",[[],["^2N"],["^2N","^2V"],["^2N","^2V","~$executor"]]]]],"^1<","Returns a Manifold stream with a configurable `buffer-size`.  If a capacity is specified,\n   `put!` will yield `true` when the message is in the buffer.  Otherwise it will only yield\n   `true` once it has been consumed.\n\n   `xform` is an optional transducer, which will transform all messages that are enqueued\n   via `put!` before they are dequeued via `take!`.\n\n   `executor`, if defined, specifies which java.util.concurrent.Executor will be used to\n   handle the deferreds returned by `put!` and `take!`.","^1E",["^ ","^1>",false,"^1B",3,"^1?",["^18",[[],["^2N"],["^2N","^2V"],["^2N","^2V","^3K"]]],"^17",["^18",[[],["^2N"],["^2N","^2V"],["^2N","^2V","^3K"]]],"^1A",["^18",[null,null,null,null]]]],"^>","~$manifold-cljs.stream/stream","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",13,"^1E",["^ ","^1>",false,"^1B",3,"^1?",["^18",[[],["^2N"],["^2N","^2V"],["^2N","^2V","^3K"]]],"^17",["^18",[[],["^2N"],["^2N","^2V"],["^2N","^2V","^3K"]]],"^1A",["^18",[null,null,null,null]]],"^1?",["^18",[[],["^2N"],["^2N","^2V"],["^2N","^2V","^3K"]]],"^1@",null,"^1A",["^18",[null,null,null,null]],"^12",1,"^15",302,"^16",302,"^1B",3,"^1C",true,"^17",["^18",[[],["^2N"],["^2N","^2V"],["^2N","^2V","^3K"]]],"^1<","Returns a Manifold stream with a configurable `buffer-size`.  If a capacity is specified,\n   `put!` will yield `true` when the message is in the buffer.  Otherwise it will only yield\n   `true` once it has been consumed.\n\n   `xform` is an optional transducer, which will transform all messages that are enqueued\n   via `put!` before they are dequeued via `take!`.\n\n   `executor`, if defined, specifies which java.util.concurrent.Executor will be used to\n   handle the deferreds returned by `put!` and `take!`."],"~$periodically",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",546,"^12",7,"^16",546,"^11",19,"^17",["^18",["^19",["^18",[["~$period","~$initial-delay","~$f"],["^3N","~$f"]]]]],"^1<","Creates a stream which emits the result of invoking `(f)` every `period` milliseconds.","^1E",["^ ","^1>",false,"^1B",3,"^1?",["^18",[["^3N","^3O","~$f"],["^3N","~$f"]]],"^17",["^18",[["^3N","^3O","~$f"],["^3N","~$f"]]],"^1A",["^18",[null,null]]]],"^>","~$manifold-cljs.stream/periodically","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",19,"^1E",["^ ","^1>",false,"^1B",3,"^1?",["^18",[["^3N","^3O","~$f"],["^3N","~$f"]]],"^17",["^18",[["^3N","^3O","~$f"],["^3N","~$f"]]],"^1A",["^18",[null,null]]],"^1?",["^18",[["^3N","^3O","~$f"],["^3N","~$f"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",546,"^16",546,"^1B",3,"^1C",true,"^17",["^18",[["^3N","^3O","~$f"],["^3N","~$f"]]],"^1<","Creates a stream which emits the result of invoking `(f)` every `period` milliseconds."],"~$closed?",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",186,"^12",7,"^16",186,"^11",14,"^17",["^18",["^19",["^18",[["^1:"]]]]],"^1<","Returns true if the event sink is closed."],"^>","~$manifold-cljs.stream/closed?","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",14,"^1?",["^18",[["^1:"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",186,"^16",186,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["^1:"]]]]],"^1<","Returns true if the event sink is closed."],"~$buffered-stream",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",907,"^12",7,"^16",907,"^11",22,"^17",["^18",["^19",["^18",[["^2N"],["^21","^20"],["^21","^20","^2>"]]]]],"^1<","A stream which will buffer at most `limit` data, where the size of each message\n   is defined by `(metric message)`.","^1E",["^ ","^1>",false,"^1B",3,"^1?",["^18",[["^2N"],["^21","^20"],["^21","^20","^2>"]]],"^17",["^18",[["^2N"],["^21","^20"],["^21","^20","^2>"]]],"^1A",["^18",[null,null,null]]]],"^>","~$manifold-cljs.stream/buffered-stream","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",22,"^1E",["^ ","^1>",false,"^1B",3,"^1?",["^18",[["^2N"],["^21","^20"],["^21","^20","^2>"]]],"^17",["^18",[["^2N"],["^21","^20"],["^21","^20","^2>"]]],"^1A",["^18",[null,null,null]]],"^1?",["^18",[["^2N"],["^21","^20"],["^21","^20","^2>"]]],"^1@",null,"^1A",["^18",[null,null,null]],"^12",1,"^15",907,"^16",907,"^1B",3,"^1C",true,"^17",["^18",[["^2N"],["^21","^20"],["^21","^20","^2>"]]],"^1<","A stream which will buffer at most `limit` data, where the size of each message\n   is defined by `(metric message)`."],"~$batch",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",955,"^12",7,"^16",955,"^11",12,"^17",["^18",["^19",["^18",[["~$batch-size","~$s"],["~$max-size","~$max-latency","~$s"],["^21","^3W","^3X","~$s"]]]]],"^1<","Batches messages, either into groups of fixed size, or according to upper bounds on size and\n   latency, in milliseconds.  By default, each message is of size `1`, but a custom `metric` function that\n   returns the size of each message may be defined.","^1E",["^ ","^1>",false,"^1B",4,"^1?",["^18",[["^3V","~$s"],["^3W","^3X","~$s"],["^21","^3W","^3X","~$s"]]],"^17",["^18",[["^3V","~$s"],["^3W","^3X","~$s"],["^21","^3W","^3X","~$s"]]],"^1A",["^18",[null,null,null]]]],"^>","~$manifold-cljs.stream/batch","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",12,"^1E",["^ ","^1>",false,"^1B",4,"^1?",["^18",[["^3V","~$s"],["^3W","^3X","~$s"],["^21","^3W","^3X","~$s"]]],"^17",["^18",[["^3V","~$s"],["^3W","^3X","~$s"],["^21","^3W","^3X","~$s"]]],"^1A",["^18",[null,null,null]]],"^1?",["^18",[["^3V","~$s"],["^3W","^3X","~$s"],["^21","^3W","^3X","~$s"]]],"^1@",null,"^1A",["^18",[null,null,null]],"^12",1,"^15",955,"^16",955,"^1B",4,"^1C",true,"^17",["^18",[["^3V","~$s"],["^3W","^3X","~$s"],["^21","^3W","^3X","~$s"]]],"^1<","Batches messages, either into groups of fixed size, or according to upper bounds on size and\n   latency, in milliseconds.  By default, each message is of size `1`, but a custom `metric` function that\n   returns the size of each message may be defined."],"~$SplicedStream",["^ ","^1O",2,"^Y",["^6",["^1P","^Z","^["]],"^>","~$manifold-cljs.stream/SplicedStream","^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",23,"^1R",true,"^12",10,"^15",339,"^1S",false,"^16",339,"^1;",null],"~$try-take!",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",256,"^12",7,"^16",256,"^11",16,"^17",["^18",["^19",["^18",[["^2S","^3?"],["^2S","^2G","^3?","~$timeout-val"]]]]],"^1<","Takes a value from a stream, returning a deferred that yields the value if it is\n   available within `timeout` milliseconds, or `nil` if it fails or times out.\n   Guaranteed to be non-blocking.\n\n   Special `timeout-val` and `default-val` values may be specified, if it is\n   important to differentiate between actual `nil` values and failures.","^1E",["^ ","^1>",false,"^1B",4,"^1?",["^18",[["^2S","^3?"],["^2S","^2G","^3?","^41"]]],"^17",["^18",[["^2S","^3?"],["^2S","^2G","^3?","^41"]]],"^1A",["^18",[null,null]]]],"^>","~$manifold-cljs.stream/try-take!","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",16,"^1E",["^ ","^1>",false,"^1B",4,"^1?",["^18",[["^2S","^3?"],["^2S","^2G","^3?","^41"]]],"^17",["^18",[["^2S","^3?"],["^2S","^2G","^3?","^41"]]],"^1A",["^18",[null,null]]],"^1?",["^18",[["^2S","^3?"],["^2S","^2G","^3?","^41"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",256,"^16",256,"^1B",4,"^1C",true,"^17",["^18",[["^2S","^3?"],["^2S","^2G","^3?","^41"]]],"^1<","Takes a value from a stream, returning a deferred that yields the value if it is\n   available within `timeout` milliseconds, or `nil` if it fails or times out.\n   Guaranteed to be non-blocking.\n\n   Special `timeout-val` and `default-val` values may be specified, if it is\n   important to differentiate between actual `nil` values and failures."],"^=",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",631,"^12",7,"^16",631,"^11",13,"^17",["^18",["^19",["^18",[["~$pred","~$s"]]]]],"^1<","Equivalent to Clojure's `filter`, but for streams instead of sequences."],"^>","~$manifold-cljs.stream/filter","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",13,"^1?",["^18",[["^43","~$s"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",631,"^16",631,"^1B",2,"^1C",true,"^17",["^18",["^19",["^18",[["^43","~$s"]]]]],"^1<","Equivalent to Clojure's `filter`, but for streams instead of sequences."],"~$periodically-",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",518,"^12",8,"^16",518,"^11",21,"^31",true,"^17",["^18",["^19",["^18",[["^3J","^3N","^3O","~$f"]]]]]],"^31",true,"^>","~$manifold-cljs.stream/periodically-","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",21,"^1?",["^18",[["^3J","^3N","^3O","~$f"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",518,"^16",518,"^1B",4,"^1C",true,"^17",["^18",["^19",["^18",[["^3J","^3N","^3O","~$f"]]]]]],"~$->SplicedStream",["^ ","^W",null,"^X",["^ ","^Y",["^6",["^1P","^Z","^["]],"^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",23,"^12",10,"^13","^14","^15",339,"^16",339,"^17",["^18",["^19",["^18",[["^1:","^2S"]]]]],"^1;",null,"^1<","Positional factory function for manifold-cljs.stream/SplicedStream."],"^Y",["^6",["^1P","^Z","^["]],"^>","~$manifold-cljs.stream/->SplicedStream","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",23,"^1?",["^18",[["^1:","^2S"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^13","^14","^15",339,"^16",339,"^1B",2,"^1C",true,"^17",["^18",["^19",["^18",[["^1:","^2S"]]]]],"^1;",null,"^1<","Positional factory function for manifold-cljs.stream/SplicedStream."],"~$on-drained",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",204,"^12",7,"^16",204,"^11",17,"^17",["^18",["^19",["^18",[["^2S","^1J"]]]]],"^1<","Registers a no-arg callback which is invoked when the source is drained."],"^>","~$manifold-cljs.stream/on-drained","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",17,"^1?",["^18",[["^2S","^1J"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",204,"^16",204,"^1B",2,"^1C",true,"^17",["^18",["^19",["^18",[["^2S","^1J"]]]]],"^1<","Registers a no-arg callback which is invoked when the source is drained."],"~$try-put!",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",231,"^12",7,"^16",231,"^11",15,"^17",["^18",["^19",["^18",[["^1:","~$x","^3?"],["^1:","~$x","^3?","^41"]]]]],"^1<","Puts a value into a stream if the put can successfully be completed in `timeout`\n   milliseconds.  Returns a promiise that yields `true` if it succeeds, and `false`\n   if it fails or times out.  Guaranteed to be non-blocking.\n\n   A special `timeout-val` may be specified, if it is important to differentiate\n   between failure due to timeout and other failures.","^1E",["^ ","^1>",false,"^1B",4,"^1?",["^18",[["^1:","~$x","^3?"],["^1:","~$x","^3?","^41"]]],"^17",["^18",[["^1:","~$x","^3?"],["^1:","~$x","^3?","^41"]]],"^1A",["^18",[null,null]]]],"^>","~$manifold-cljs.stream/try-put!","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",15,"^1E",["^ ","^1>",false,"^1B",4,"^1?",["^18",[["^1:","~$x","^3?"],["^1:","~$x","^3?","^41"]]],"^17",["^18",[["^1:","~$x","^3?"],["^1:","~$x","^3?","^41"]]],"^1A",["^18",[null,null]]],"^1?",["^18",[["^1:","~$x","^3?"],["^1:","~$x","^3?","^41"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",231,"^16",231,"^1B",4,"^1C",true,"^17",["^18",[["^1:","~$x","^3?"],["^1:","~$x","^3?","^41"]]],"^1<","Puts a value into a stream if the put can successfully be completed in `timeout`\n   milliseconds.  Returns a promiise that yields `true` if it succeeds, and `false`\n   if it fails or times out.  Guaranteed to be non-blocking.\n\n   A special `timeout-val` may be specified, if it is important to differentiate\n   between failure due to timeout and other failures."],"~$consume-async",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",442,"^12",7,"^16",442,"^11",20,"^17",["^18",["^19",["^18",[["^1J","^2S"]]]]],"^1<","Feeds all messages from `source` into `callback`, which must return a deferred yielding\n   `true` or `false`.  If the returned value yields `false`, the consumption will be cancelled.\n\n   Messages will be processed only as quickly as the deferred values are realized. Returns a\n   deferred which yields `true` when `source` is exhausted or `callback` yields `false`."],"^>","~$manifold-cljs.stream/consume-async","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",20,"^1?",["^18",[["^1J","^2S"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",442,"^16",442,"^1B",2,"^1C",true,"^17",["^18",["^19",["^18",[["^1J","^2S"]]]]],"^1<","Feeds all messages from `source` into `callback`, which must return a deferred yielding\n   `true` or `false`.  If the returned value yields `false`, the consumption will be cancelled.\n\n   Messages will be processed only as quickly as the deferred values are realized. Returns a\n   deferred which yields `true` when `source` is exhausted or `callback` yields `false`."],"~$zip",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",602,"^12",9,"^16",602,"^11",12,"^17",["^18",["^19",["^18",[["~$a"],["~$a","~$&","^1T"]]]]],"^1<","Takes n-many streams, and returns a single stream which will emit n-tuples representing\n     a message from each stream.","^1E",["^ ","^1>",true,"^1B",1,"^1?",["^18",[["~$a"]]],"^17",["^18",[["~$a"],["~$a","~$&","^1T"]]],"^1A",["^18",[null,null]]]],"^>","~$manifold-cljs.stream/zip","^1>",true,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",12,"^1E",["^ ","^1>",true,"^1B",1,"^1?",["^18",[["~$a"]]],"^17",["^18",[["~$a"],["~$a","~$&","^1T"]]],"^1A",["^18",[null,null]]],"^1?",["^18",[["~$a"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",3,"^15",602,"^16",602,"^1B",1,"^1C",true,"^17",["^18",[["~$a"],["~$a","~$&","^1T"]]],"^1<","Takes n-many streams, and returns a single stream which will emit n-tuples representing\n     a message from each stream."],"~$->SourceProxy",["^ ","^W",null,"^X",["^ ","^Y",["^6",["^1P","^["]],"^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",21,"^12",10,"^13","^14","^15",96,"^16",96,"^17",["^18",["^19",["^18",[["^2S"]]]]],"^1;",null,"^1<","Positional factory function for manifold-cljs.stream/SourceProxy."],"^Y",["^6",["^1P","^["]],"^>","~$manifold-cljs.stream/->SourceProxy","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",21,"^1?",["^18",[["^2S"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^13","^14","^15",96,"^16",96,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["^2S"]]]]],"^1;",null,"^1<","Positional factory function for manifold-cljs.stream/SourceProxy."],"~$realize-each",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",584,"^12",7,"^16",584,"^11",19,"^17",["^18",["^19",["^18",[["~$s"]]]]],"^1<","Takes a stream of potentially deferred values, and returns a stream of realized values."],"^>","~$manifold-cljs.stream/realize-each","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",19,"^1?",["^18",[["~$s"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",584,"^16",584,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["~$s"]]]]],"^1<","Takes a stream of potentially deferred values, and returns a stream of realized values."],"~$sink-only",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",128,"^12",7,"^16",128,"^11",16,"^17",["^18",["^19",["^18",[["~$s"]]]]],"^1<","Returns a view of the stream which is only a sink."],"^>","~$manifold-cljs.stream/sink-only","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",16,"^1?",["^18",[["~$s"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",128,"^16",128,"^1B",1,"^1C",true,"^17",["^18",["^19",["^18",[["~$s"]]]]],"^1<","Returns a view of the stream which is only a sink."],"~$stream*",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",322,"^12",7,"^16",322,"^11",14,"^17",["^18",["^19",[[["^ ","^3<",["~$permanent?","^2N","^2>","^3K","^2V"]]]]]],"^1<","An alternate way to build a stream, via a map of parameters.\n\n   |:---|:---\n   | `permanent?` | if `true`, the channel cannot be closed\n   | `buffer-size` | the number of messages that can accumulate in the channel before backpressure is applied\n   | `description` | the description of the channel, which is a single arg function that takes the base properties and returns an enriched map.\n   | `executor` | the `manifold-cljs.executor/Executor` that will execute all callbacks registered on the deferreds returns by `put!` and `take!`\n   | `xform` | a transducer which will transform all messages that are enqueued via `put!` before they are dequeued via `take!`."],"^>","~$manifold-cljs.stream/stream*","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",14,"^1?",["^18",[["^33"]]],"^1@",null,"^1A",["^18",[null,["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",331,"^12",15,"^16",331,"^11",78]]],"^12",1,"^15",322,"^16",322,"^1B",1,"^1C",true,"^17",["^18",["^19",[[["^ ","^3<",["^4H","^2N","^2>","^3K","^2V"]]]]]],"^1<","An alternate way to build a stream, via a map of parameters.\n\n   |:---|:---\n   | `permanent?` | if `true`, the channel cannot be closed\n   | `buffer-size` | the number of messages that can accumulate in the channel before backpressure is applied\n   | `description` | the description of the channel, which is a single arg function that takes the base properties and returns an enriched map.\n   | `executor` | the `manifold-cljs.executor/Executor` that will execute all callbacks registered on the deferreds returns by `put!` and `take!`\n   | `xform` | a transducer which will transform all messages that are enqueued via `put!` before they are dequeued via `take!`."],"~$BufferedStream",["^ ","^1O",7,"^Y",["^6",["^1P","^Z","^["]],"^>","~$manifold-cljs.stream/BufferedStream","^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",24,"^1R",true,"^12",10,"^15",809,"^1S",false,"^16",809,"^1;",null],"~$put!",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",209,"^12",7,"^16",209,"^11",11,"^17",["^18",["^19",["^18",[["^1:","~$x"]]]]],"^1<","Puts a value into a sink, returning a deferred that yields `true` if it succeeds,\n   and `false` if it fails.  Guaranteed to be non-blocking."],"^>","~$manifold-cljs.stream/put!","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",11,"^1?",["^18",[["^1:","~$x"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",209,"^16",209,"^1B",2,"^1C",true,"^17",["^18",["^19",["^18",[["^1:","~$x"]]]]],"^1<","Puts a value into a sink, returning a deferred that yields `true` if it succeeds,\n   and `false` if it fails.  Guaranteed to be non-blocking."],"~$take!",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",244,"^12",7,"^16",244,"^11",12,"^17",["^18",["^19",["^18",[["^2S"],["^2S","^2G"]]]]],"^1<","Takes a value from a stream, returning a deferred that yields the value when it\n   is available, or `nil` if the take fails.  Guaranteed to be non-blocking.\n\n   A special `default-val` may be specified, if it is important to differentiate\n   between actual `nil` values and failures.","^1E",["^ ","^1>",false,"^1B",2,"^1?",["^18",[["^2S"],["^2S","^2G"]]],"^17",["^18",[["^2S"],["^2S","^2G"]]],"^1A",["^18",[null,null]]]],"^>","~$manifold-cljs.stream/take!","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",12,"^1E",["^ ","^1>",false,"^1B",2,"^1?",["^18",[["^2S"],["^2S","^2G"]]],"^17",["^18",[["^2S"],["^2S","^2G"]]],"^1A",["^18",[null,null]]],"^1?",["^18",[["^2S"],["^2S","^2G"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",244,"^16",244,"^1B",2,"^1C",true,"^17",["^18",[["^2S"],["^2S","^2G"]]],"^1<","Takes a value from a stream, returning a deferred that yields the value when it\n   is available, or `nil` if the take fails.  Guaranteed to be non-blocking.\n\n   A special `default-val` may be specified, if it is important to differentiate\n   between actual `nil` values and failures."],"~$SinkProxy",["^ ","^1O",1,"^Y",["^6",["^Z","^["]],"^>","~$manifold-cljs.stream/SinkProxy","^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",19,"^1R",true,"^12",10,"^15",70,"^1S",false,"^16",70,"^1;",null],"~$throttle",["^ ","^W",null,"^X",["^ ","^10","/Users/waffles/Desktop/clojure/vr-game/resources/public/js/compiled/out/manifold_cljs/stream.cljs","^15",1024,"^12",7,"^16",1024,"^11",15,"^17",["^18",["^19",["^18",[["~$max-rate","~$s"],["^4S","~$max-backlog","~$s"]]]]],"^1<","Limits the `max-rate` that messages are emitted, per second.\n\n   The `max-backlog` dictates how much \"memory\" the throttling mechanism has, or how many\n   messages it will emit immediately after a long interval without any messages.  By default,\n   this is set to one second's worth.","^1E",["^ ","^1>",false,"^1B",3,"^1?",["^18",[["^4S","~$s"],["^4S","^4T","~$s"]]],"^17",["^18",[["^4S","~$s"],["^4S","^4T","~$s"]]],"^1A",["^18",[null,null]]]],"^>","~$manifold-cljs.stream/throttle","^1>",false,"^10","resources/public/js/compiled/out/manifold_cljs/stream.cljs","^11",15,"^1E",["^ ","^1>",false,"^1B",3,"^1?",["^18",[["^4S","~$s"],["^4S","^4T","~$s"]]],"^17",["^18",[["^4S","~$s"],["^4S","^4T","~$s"]]],"^1A",["^18",[null,null]]],"^1?",["^18",[["^4S","~$s"],["^4S","^4T","~$s"]]],"^1@",null,"^1A",["^18",[null,null]],"^12",1,"^15",1024,"^16",1024,"^1B",3,"^1C",true,"^17",["^18",[["^4S","~$s"],["^4S","^4T","~$s"]]],"^1<","Limits the `max-rate` that messages are emitted, per second.\n\n   The `max-backlog` dictates how much \"memory\" the throttling mechanism has, or how many\n   messages it will emit immediately after a long interval without any messages.  By default,\n   this is set to one second's worth."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^R","^Q","^Q","^Q","~$u","^J","^J","^J","~$d","^P","^P","^P","~$e","^C","^C","^C"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:description","~:manifold-cljs.stream/x","~:manifold-cljs.stream/none","^21","~:buffer-size","^1:","~:manifold-cljs.deferred/none","~:else","^2B","~:manifold-cljs.stream/drained","^2P","^2N","^2L","^2M","^20","^1R","~:manifold-cljs.stream/empty","~:op","~:source","^2S","^2A","~:manifold-cljs.stream/error","~:buffer-capacity","~:manifold-cljs.stream/timeout","~:sink","^2C","^2O","~$f"]],"~:order",["^50","^53","^1:","^2S","^52","^1R","^5;","^57","~$f","^2A","^2B","^2C","^4Z","^56","^54","^58","^4[","^51","^59","^5:","^2L","^20","^21","^2M","^2N","^2O","^2P","^55"]],"^1<",null]